// <auto-generated />
using System;
using Conferences_projet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Conferences_projet.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240611192208_newmi")]
    partial class newmi
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AdministrateurUtilisateur", b =>
                {
                    b.Property<int>("AdministrateursId")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateursId")
                        .HasColumnType("int");

                    b.HasKey("AdministrateursId", "UtilisateursId");

                    b.HasIndex("UtilisateursId");

                    b.ToTable("AdministrateurUtilisateur");
                });

            modelBuilder.Entity("Conferences_projet.Models.Affectation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAffectation")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MembreComiteId")
                        .HasColumnType("int");

                    b.Property<int>("RelecteurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("MembreComiteId");

                    b.HasIndex("RelecteurId");

                    b.ToTable("Affectations");
                });

            modelBuilder.Entity("Conferences_projet.Models.Article", b =>
                {
                    b.Property<int>("IdArticle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuteurId")
                        .HasColumnType("int");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<string>("FichierPdf")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NombreRelecteurs")
                        .HasColumnType("int");

                    b.Property<string>("Resume")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdArticle");

                    b.HasIndex("AuteurId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Conferences_projet.Models.Conference", b =>
                {
                    b.Property<int>("ConferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateLimiteInscription")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateLimiteResultats")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateSoumission")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MembreComiteId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sigle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ConferenceId");

                    b.HasIndex("MembreComiteId");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("Conferences_projet.Models.Entreprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdministrateurId")
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AdministrateurId");

                    b.ToTable("Entreprises");
                });

            modelBuilder.Entity("Conferences_projet.Models.Evaluation", b =>
                {
                    b.Property<int>("EvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NoteFond")
                        .HasColumnType("int");

                    b.Property<int>("NoteForme")
                        .HasColumnType("int");

                    b.Property<int>("NotePertinenceScientifique")
                        .HasColumnType("int");

                    b.Property<int>("RelecteurId")
                        .HasColumnType("int");

                    b.HasKey("EvaluationId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("RelecteurId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("Conferences_projet.Models.ParticipantConference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInscription")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ParticipantsConferences");
                });

            modelBuilder.Entity("Conferences_projet.Models.Universite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdministrateurId")
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AdministrateurId");

                    b.ToTable("Universites");
                });

            modelBuilder.Entity("Conferences_projet.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EstActif")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Utilisateur");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Conferences_projet.Models.Administrateur", b =>
                {
                    b.HasBaseType("Conferences_projet.Models.Utilisateur");

                    b.HasDiscriminator().HasValue("Administrateur");
                });

            modelBuilder.Entity("Conferences_projet.Models.Auteur", b =>
                {
                    b.HasBaseType("Conferences_projet.Models.Utilisateur");

                    b.Property<int?>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<int?>("EntrepriseId1")
                        .HasColumnType("int");

                    b.Property<bool>("EstConfirme")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UniversiteId")
                        .HasColumnType("int");

                    b.Property<int?>("UniversiteId1")
                        .HasColumnType("int");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("EntrepriseId1");

                    b.HasIndex("UniversiteId");

                    b.HasIndex("UniversiteId1");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("users", t =>
                        {
                            t.Property("UtilisateurId")
                                .HasColumnName("Auteur_UtilisateurId");
                        });

                    b.HasDiscriminator().HasValue("Auteur");
                });

            modelBuilder.Entity("Conferences_projet.Models.MembreComite", b =>
                {
                    b.HasBaseType("Conferences_projet.Models.Utilisateur");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("users", t =>
                        {
                            t.Property("UtilisateurId")
                                .HasColumnName("MembreComite_UtilisateurId");
                        });

                    b.HasDiscriminator().HasValue("MembreComite");
                });

            modelBuilder.Entity("Conferences_projet.Models.Participant", b =>
                {
                    b.HasBaseType("Conferences_projet.Models.Utilisateur");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("users", t =>
                        {
                            t.Property("UtilisateurId")
                                .HasColumnName("Participant_UtilisateurId");
                        });

                    b.HasDiscriminator().HasValue("Participant");
                });

            modelBuilder.Entity("Conferences_projet.Models.Relecteur", b =>
                {
                    b.HasBaseType("Conferences_projet.Models.Utilisateur");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasIndex("UtilisateurId");

                    b.HasDiscriminator().HasValue("Relecteur");
                });

            modelBuilder.Entity("AdministrateurUtilisateur", b =>
                {
                    b.HasOne("Conferences_projet.Models.Administrateur", null)
                        .WithMany()
                        .HasForeignKey("AdministrateursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conferences_projet.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UtilisateursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conferences_projet.Models.Affectation", b =>
                {
                    b.HasOne("Conferences_projet.Models.Article", "Article")
                        .WithMany("Affectations")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conferences_projet.Models.MembreComite", "MembreComite")
                        .WithMany("Affectations")
                        .HasForeignKey("MembreComiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conferences_projet.Models.Relecteur", "Relecteur")
                        .WithMany("Affectations")
                        .HasForeignKey("RelecteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("MembreComite");

                    b.Navigation("Relecteur");
                });

            modelBuilder.Entity("Conferences_projet.Models.Article", b =>
                {
                    b.HasOne("Conferences_projet.Models.Auteur", "Auteur")
                        .WithMany("Articles")
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conferences_projet.Models.Conference", "Conference")
                        .WithMany("Articles")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auteur");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("Conferences_projet.Models.Conference", b =>
                {
                    b.HasOne("Conferences_projet.Models.MembreComite", null)
                        .WithMany("Conférences")
                        .HasForeignKey("MembreComiteId");
                });

            modelBuilder.Entity("Conferences_projet.Models.Entreprise", b =>
                {
                    b.HasOne("Conferences_projet.Models.Administrateur", null)
                        .WithMany("Entreprises")
                        .HasForeignKey("AdministrateurId");
                });

            modelBuilder.Entity("Conferences_projet.Models.Evaluation", b =>
                {
                    b.HasOne("Conferences_projet.Models.Article", "Article")
                        .WithMany("Evaluations")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conferences_projet.Models.Relecteur", "Relecteur")
                        .WithMany("Evaluations")
                        .HasForeignKey("RelecteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Relecteur");
                });

            modelBuilder.Entity("Conferences_projet.Models.ParticipantConference", b =>
                {
                    b.HasOne("Conferences_projet.Models.Conference", "Conference")
                        .WithMany("ParticipantsConferences")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conferences_projet.Models.Participant", "Participant")
                        .WithMany("ParticipantsConferences")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Conferences_projet.Models.Universite", b =>
                {
                    b.HasOne("Conferences_projet.Models.Administrateur", null)
                        .WithMany("Universités")
                        .HasForeignKey("AdministrateurId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Conferences_projet.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Conferences_projet.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conferences_projet.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Conferences_projet.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conferences_projet.Models.Auteur", b =>
                {
                    b.HasOne("Conferences_projet.Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Conferences_projet.Models.Entreprise", null)
                        .WithMany("Auteurs")
                        .HasForeignKey("EntrepriseId1");

                    b.HasOne("Conferences_projet.Models.Universite", "Universite")
                        .WithMany()
                        .HasForeignKey("UniversiteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Conferences_projet.Models.Universite", null)
                        .WithMany("Auteurs")
                        .HasForeignKey("UniversiteId1");

                    b.HasOne("Conferences_projet.Models.Utilisateur", null)
                        .WithMany("Auteurs")
                        .HasForeignKey("UtilisateurId");

                    b.Navigation("Entreprise");

                    b.Navigation("Universite");
                });

            modelBuilder.Entity("Conferences_projet.Models.MembreComite", b =>
                {
                    b.HasOne("Conferences_projet.Models.Conference", "Conference")
                        .WithMany("MembresComite")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conferences_projet.Models.Utilisateur", null)
                        .WithMany("MembresComite")
                        .HasForeignKey("UtilisateurId");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("Conferences_projet.Models.Participant", b =>
                {
                    b.HasOne("Conferences_projet.Models.Utilisateur", null)
                        .WithMany("Participants")
                        .HasForeignKey("UtilisateurId");
                });

            modelBuilder.Entity("Conferences_projet.Models.Relecteur", b =>
                {
                    b.HasOne("Conferences_projet.Models.Utilisateur", null)
                        .WithMany("Relecteurs")
                        .HasForeignKey("UtilisateurId");
                });

            modelBuilder.Entity("Conferences_projet.Models.Article", b =>
                {
                    b.Navigation("Affectations");

                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("Conferences_projet.Models.Conference", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("MembresComite");

                    b.Navigation("ParticipantsConferences");
                });

            modelBuilder.Entity("Conferences_projet.Models.Entreprise", b =>
                {
                    b.Navigation("Auteurs");
                });

            modelBuilder.Entity("Conferences_projet.Models.Universite", b =>
                {
                    b.Navigation("Auteurs");
                });

            modelBuilder.Entity("Conferences_projet.Models.Utilisateur", b =>
                {
                    b.Navigation("Auteurs");

                    b.Navigation("MembresComite");

                    b.Navigation("Participants");

                    b.Navigation("Relecteurs");
                });

            modelBuilder.Entity("Conferences_projet.Models.Administrateur", b =>
                {
                    b.Navigation("Entreprises");

                    b.Navigation("Universités");
                });

            modelBuilder.Entity("Conferences_projet.Models.Auteur", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Conferences_projet.Models.MembreComite", b =>
                {
                    b.Navigation("Affectations");

                    b.Navigation("Conférences");
                });

            modelBuilder.Entity("Conferences_projet.Models.Participant", b =>
                {
                    b.Navigation("ParticipantsConferences");
                });

            modelBuilder.Entity("Conferences_projet.Models.Relecteur", b =>
                {
                    b.Navigation("Affectations");

                    b.Navigation("Evaluations");
                });
#pragma warning restore 612, 618
        }
    }
}
